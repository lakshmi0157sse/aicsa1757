from collections import deque

def is_valid_state(m_left, c_left, m_right, c_right):
    if (m_left < c_left and m_left > 0) or (m_right < c_right and m_right > 0):
        return False
    return True

def bfs():
    start = (3, 3, 0)
    goal = (0, 0, 1)

    queue = deque([(start, [])])
    visited = set()
    visited.add(start)

    while queue:
        (m_left, c_left, boat_position), path = queue.popleft()

        if (m_left, c_left, boat_position) == goal:
            return path

        possible_moves = [
            (1, 0),
            (0, 1),
            (2, 0),
            (0, 2),
            (1, 1)
        ]

        for m_move, c_move in possible_moves:
            if boat_position == 0:
                new_m_left = m_left - m_move
                new_c_left = c_left - c_move
                new_m_right = 3 - new_m_left
                new_c_right = 3 - new_c_left
                new_boat_position = 1
            else:
                new_m_left = m_left + m_move
                new_c_left = c_left + c_move
                new_m_right = 3 - new_m_left
                new_c_right = 3 - new_c_left
                new_boat_position = 0

            if 0 <= new_m_left <= 3 and 0 <= new_c_left <= 3 and 0 <= new_m_right <= 3 and 0 <= new_c_right <= 3:
                if is_valid_state(new_m_left, new_c_left, new_m_right, new_c_right):
                    new_state = (new_m_left, new_c_left, new_boat_position)
                    if new_state not in visited:
                        visited.add(new_state)
                        queue.append((new_state, path + [(m_move, c_move)]))

    return None

def print_solution(solution):
    if solution is None:
        print("No solution found.")
    else:
        print("Solution steps:")
        for move in solution:
            print(f"Move {move[0]} missionaries and {move[1]} cannibals.")

solution = bfs()
print_solution(solution)

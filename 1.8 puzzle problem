import heapq

class PuzzleState:
    def __init__(self, board, goal, moves=0, parent=None):
        self.board = board
        self.goal = goal
        self.moves = moves  # Number of moves from the start state
        self.parent = parent
        self.cost = self.moves + self.manhattan_distance()  # A* f(n) = g(n) + h(n)

    def __lt__(self, other):
        return self.cost < other.cost

    def manhattan_distance(self):
        distance = 0
        goal_flat = sum(self.goal, [])  # Flatten the goal 2D list into a 1D list
        for i in range(3):
            for j in range(3):
                if self.board[i][j] != 0:
                    goal_x, goal_y = divmod(goal_flat.index(self.board[i][j]), 3)
                    distance += abs(i - goal_x) + abs(j - goal_y)
        return distance

    def find_blank(self):
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    return i, j

    def generate_children(self):
        children = []
        blank_x, blank_y = self.find_blank()
        moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right

        for move in moves:
            new_x, new_y = blank_x + move[0], blank_y + move[1]
            if 0 <= new_x < 3 and 0 <= new_y < 3:
                new_board = [row[:] for row in self.board]
                # Swap the blank tile with the adjacent tile
                new_board[blank_x][blank_y], new_board[new_x][new_y] = new_board[new_x][new_y], new_board[blank_x][blank_y]
                # Create the new child state
                child_state = PuzzleState(new_board, self.goal, self.moves + 1, self)
                children.append(child_state)

        return children

def a_star_search(start, goal):
    start_state = PuzzleState(start, goal)
    open_set = []
    closed_set = set()
    heapq.heappush(open_set, (start_state.cost, start_state))

    while open_set:
        _, current = heapq.heappop(open_set)
        closed_set.add(tuple(map(tuple, current.board)))

        if current.board == goal:
            path = []
            while current:
                path.append(current.board)
                current = current.parent
            return path[::-1]

        for child in current.generate_children():
            if tuple(map(tuple, child.board)) in closed_set:
                continue

            if all(child.cost < existing_child.cost for _, existing_child in open_set if existing_child == child):
                heapq.heappush(open_set, (child.cost, child))

    return None

# Example Usage
initial_state = [
    [1, 2, 3],
    [4, 0, 5],
    [6, 7, 8]
]

goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

solution_path = a_star_search(initial_state, goal_state)
if solution_path:
    for step in solution_path:
        for row in step:
            print(row)
        print()
else:
    print("No solution found.")

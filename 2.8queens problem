def print_board(board):
    for row in board:
        print(" ".join("Q" if cell else "." for cell in row))
    print("\n")

def is_safe(board, row, col, n):
    # Check the column
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check the upper-left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check the upper-right diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens(board, row, n, solutions):
    if row == n:
        # Found a valid solution; add a copy of the board to solutions
        solutions.append([row[:] for row in board])
        return True

    found_solution = False
    for col in range(n):
        if is_safe(board, row, col, n):
            # Place the queen
            board[row][col] = 1
            # Recur to place the rest of the queens
            found_solution = solve_n_queens(board, row + 1, n, solutions) or found_solution
            # Backtrack
            board[row][col] = 0

    return found_solution

def find_all_solutions(n=8):
    board = [[0] * n for _ in range(n)]
    solutions = []
    solve_n_queens(board, 0, n, solutions)
    return solutions

# Example usage
n = 8
solutions = find_all_solutions(n)
print(f"Found {len(solutions)} solutions for the {n}-Queens problem.\n")

for i, solution in enumerate(solutions, 1):
    print(f"Solution {i}:")
    print_board(solution)

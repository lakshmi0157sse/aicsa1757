from collections import deque

# Function to perform BFS
def bfs(graph, start_node):
    visited = set()  # Set to keep track of visited nodes
    queue = deque([start_node])  # Queue to store nodes to be explored

    while queue:
        node = queue.popleft()  # Pop the first node from the queue
        if node not in visited:
            print(node, end=" ")  # Visit the node
            visited.add(node)  # Mark the node as visited

            # Add all unvisited neighbors of the node to the queue
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append(neighbor)

# Example usage:
# Graph represented as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# Perform BFS starting from node 'A'
print("BFS Traversal starting from node A:")
bfs(graph, 'A')
